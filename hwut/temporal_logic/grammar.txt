RULE-LIST: rule RULE-LIST
           rule 

STATEMENT-LIST: statement statement-LIST
                statement 

rule: 'match' string    ':' event       # an event generated by a regular expression match
      'on'    condition ':' event       # implicit event (triggered only when condition
                                        # transits from 'false' to 'true'.)
      time-span         ':' basic_rule  # condition must hold for span
      basic_rule

basic_rule: 
            'if' condition ':' basic_rule
            'if' condition ':' basic_rule 'else' ':' basic_rule
            '{' basic_rule_list '}'
            assignment 
            condition ';'                   

basic_rule_list: basic_rule basic_rule_list
                 basic_rule 

assignment:
            variable              = term ';'
            variable '[' term ']' = term ';'

[TESTED]
time-span: 'from' condition 'to' condition    
           'from' condition                  # from 'trigger' to infinity
           'to'   condition                  # from start to 'trigger'

[TESTED]
condition: condition-expr 'or' condition
           condition-expr                              

[TESTED]
condition-expr: condition-primary 'and' condition-expr  
                condition-primary

[TESTED]
condition-primary: term cmp term  
                   term                 # true if != 0.0
                   event_name           # true if event occured
                   '(' condition ')'
                   'not' condition                     

statement: reported_origin ':' event-list 
           reported_origin 
           event-list
           'log' numeric-term ';'

#                                              # file  line  time
reported_origin: string ':' number ':' number  #  X     X     X    (position in source code + time) 
                 string ':' number             #  X     X          (only position in source code)
                 number                        #              X    (only time)

event-list: event event-list 
            event 

[TESTED]
event: event-name ';'                         # trigger the given event
       event-name '(' adornment-list ')' ';'
       { event-list } 
       assignment

[TEST s. event]
adornment-list: adornment ',' adornment-list
                adornment
            
[TEST s. event]
adornment:  identifier '=' term
            term

term: expr '+', '-' term
      expr

expr: primary '*', '/' expr
      primary

[TESTED]
primary: number
         string
         variable-name
         event_name '.' identifier       # 'time' and 'count' are special members
         event_name '[' numeric-term ']' # adornment number 'number' in the event
         ( term )                      

_________________________________________________________________
[TEST s. identifier]
event_name:    identifier                       

[TESTED]
variable-name: '$' identifier
               '%time0'        # awake time of condition    
               '%time'         # current time               
               '%' integer

[TESTED]
cmp:           '==', '<=', '>=', '<', '>', '!='        

[TESTED]
string:        '"' characters* '"'                     

[TESTED]
number:        ([0-9]+("."[0-9]*)?)|("."[0-9]+)        

[TESTED] 
identifier:    [_a-zA-Z][_a-zA-Z0-9]*                 
