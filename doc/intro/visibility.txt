Visibility (in the sense of 'perceivability') is the key to any understanding.
No meaningful whitebox tests can be designed for software which is not
understood.  Further, any software that has not been tested cannot be
considered to fulfill its purpose. A piece of software that does not fulfill
its purpose is worthless. A more personal experience of the author with
visibility is that it actually provides some deep pleasure to understand and
control the sometimes complex algorithmic structures that one creates.
Visibility of software processes can be achieved by writing dedicated printing
functions. This section tries to layout some guidelines for the writing
of those functions.

Providing printing functions does not happen in no-time. Additionally, it does
not directly result in new features with which one could impress customers
or the management. However, never underestimate to power of the clear side!
Once one has nice and elegant printing functions at hand, debugging becomes
easier and extending new features works like a charm. Finally, the task
of refacturing, i.e. redesigning software while maintaining the same
functionality is only possible with automated unit tests at hand. If they
break because of redesign, then again printing functions allow to quickly monitor
the influences of the re-design.

As mentioned in the previous section HWUT's testing is based on the _comparison
of outputs of test programs_. As a direct consequence it has to be requested
that the output of a program is _independent_ of a particular environment. Any
test program that produces potentially two different outputs for the same
software environment is not suited to be used by HWUT.  For printed content 
The following points are requested:

Time Independence::

  No output of a printing function shall depent on a _global time measure_.
  Instead a simulated time is to be used or printed time requires to be 
  related to a time base, such as the time at experiment begin.

Environment Independence::

  No output shall depend on _external mechanisms_ that are not directly
  controlled by the test software or the software under test. A typical example
  are the numerical value of pointers  in C, as they are returned from the
  `malloc` functions. Again, a good approach is to relate them to a base pointer,
  and display the difference.

History Independence::

  No output shall depend on what happend before the test. If historic
  influences are to be tested the 'history' must be setup by specific setup 
  functions. If the test program communicates with external programs
  that are not automatically initialized, it is the programs task
  to initialize the communication so that the enviromment state
  is always the same.

Another pillar of HWUT based testing is the human judgement about the 
test having failed or succeeded. For this the human user must judge the
output of a program as quickly and completely as possible. This guides towards
the following goals for the printed output:

Redundancy Minimization::

  Output should as much as possible only print important things. Things that
  are not relavant for understanding the mechanisms and causalities are best
  avoided. Printed output of unimportant things is likely to produce visual
  noise that confuses the human spectator.

Format and Beauty::

  Output of should be formatted. Most languages provide convinient meanse
  to do so, such as 'format strings' in C. Half an hour spent on beautiful
  printing output pays of in hours and days of pleasure when looking
  at the output and observing quickly what is going on.

Usually, test output is done in text form. However, sometimes one might
consider to produce output that is processed by other programs. If the output
of a program can be displayed graphically with x and y coordinates, for
example, one might consider to produce output that can be read by the gnuplot
\cite{} program. 

A good set of printing function consist usually out of very few functions that
are used over and over. A nice printing function can also be plugged quickly at
places where important things happen and thus allow to probe a system with a
very high precision and almost no effort. Inspite of its nature not to add
features, the value-add of well designed and well implemented printing
functions should not be underestimated. Finally, the effectivity of HWUT as a
test tool depends highly on the quality of the users printing functions.
  
